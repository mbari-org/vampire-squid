/*
Script generated by Aqua Data Studio 22.1.2 on Feb-26-2022 11:32:50 AM
Database: M3_VIDEO_ASSETS
Schema: dbo
Objects: TABLE, VIEW, INDEX
*/
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

CREATE TABLE video_sequences  ( 
	"uuid"             	uuid PRIMARY KEY NOT NULL DEFAULT uuid_generate_v4(),
	"camera_id"        	varchar(256) NOT NULL,
	"description"      	varchar(2048) NULL,
	"name"             	varchar(512) NOT NULL,
	"last_updated_time"	timestamp NOT NULL DEFAULT now(),
	UNIQUE("name"));

/* Postgresql foreign keys default to NO ACTION on delete or update */
CREATE TABLE videos  ( 
	"uuid"               	uuid PRIMARY KEY NOT NULL DEFAULT uuid_generate_v4(),
	"video_sequence_uuid"	uuid NOT NULL,
	"description"        	varchar(2048) NULL,
	"duration_millis"    	bigint NULL,
	"name"               	varchar(512) NOT NULL,
	"start_time"         	timestamp NOT NULL,	/* start_time is the start time of the video */	
	"last_updated_time"  	timestamp NOT NULL DEFAULT now(),
	UNIQUE("name"),
	CONSTRAINT fk__videos__video_sequences__uuid 
	  FOREIGN KEY(video_sequence_uuid) 
		REFERENCES video_sequences("uuid"));

CREATE TABLE video_references  ( 
	"uuid"             	uuid PRIMARY KEY NOT NULL DEFAULT uuid_generate_v4(),
	"video_uuid"       	uuid NOT NULL,
	"audio_codec"      	varchar(128) NULL,
	"container"        	varchar(128) NULL,
	"description"      	varchar(2048) NULL,
	"frame_rate"       	DOUBLE PRECISION NULL,
	"height"           	integer NULL,
	"sha512"           	varchar(128) NULL,
	"size_bytes"       	bigint NULL,
	"uri"              	varchar(1024) NOT NULL,
	"video_codec"      	varchar(128) NULL,
	"width"            	integer NULL,
	"last_updated_time"	timestamp NOT NULL DEFAULT now(),
	UNIQUE("uri"),
	CONSTRAINT fk__videos_references__videos__uuid
	  FOREIGN KEY(video_uuid) 
		REFERENCES videos("uuid"));

CREATE INDEX "idx__video_references__uri"
	ON "video_references"("uri");

CREATE INDEX "idx__video_references__video_uuid"
	ON "video_references"("video_uuid");

CREATE INDEX "idx__video_sequences__camera_id"
	ON "video_sequences"("camera_id");

CREATE INDEX "idx__video_sequences__name"
	ON "video_sequences"("name");

CREATE INDEX "idx__videos__name"
	ON "videos"("name");

CREATE INDEX "idx__videos__start_time"
	ON "videos"("start_time");

CREATE INDEX "idx__videos__video_sequence_uuid"
	ON "videos"("video_sequence_uuid");

CREATE VIEW "unique_videos"
AS 
SELECT 
  s.uuid AS video_sequence_uuid,
  s.name AS video_sequence_name,
  v.uuid AS video_uuid,
  v.name AS video_name,
  r.uuid AS video_reference_uuid,
  r.uri,
  s.camera_id,
  v.duration_millis,
  v.start_time,
  r.container,
  r.width,
  r.height,
  r.size_bytes,
  r.last_updated_time,
  r.sha512
FROM 
    video_sequences AS s LEFT JOIN
    videos AS v ON v.video_sequence_uuid = s.uuid LEFT JOIN
    video_references AS r ON r.video_uuid = v.uuid;

create sequence REVINFO_SEQ start with 1 increment by 50;
create table REVINFO (REV integer not null, REVTSTMP bigint, primary key (REV));

create table video_sequences_AUD (
  REV integer not null, 
  REVTYPE smallint, 
  uuid uuid not null, 
  camera_id varchar(256), 
  name varchar(512), 
  description varchar(2048), 
  primary key (REV, uuid)
);
alter table if exists video_sequences_AUD add constraint fk__video_seqs_aud__revinfo foreign key (REV) references REVINFO;

create table videos_AUD (
  REV integer not null, 
  REVTYPE smallint, 
  duration_millis bigint, 
  start_time timestamp(6) with time zone, 
  uuid uuid not null, 
  video_sequence_uuid uuid, 
  name varchar(512), 
  description varchar(2048), 
  primary key (REV, uuid)
);
alter table if exists videos_AUD add constraint fk__videos_aud__revinfo foreign key (REV) references REVINFO;

create table video_references_AUD (
  REV integer not null, 
  REVTYPE smallint, 
  frame_rate float(53), 
  height integer, 
  width integer, 
  size_bytes bigint, 
  uuid uuid not null, 
  video_uuid uuid, 
  audio_codec varchar(128), 
  container varchar(128), 
  sha512 varchar(128), 
  video_codec varchar(128), 
  uri varchar(1024), 
  description varchar(2048), 
  primary key (REV, uuid)
);
alter table if exists video_references_AUD add constraint fk__video_refs_aud__revinfo foreign key (REV) references REVINFO;




